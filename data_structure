## 목차

- 자료구조
- List
  - Array List
  - Linked List
  - Cotiguous List
  - Stack
  - Queue
  - Graph
  - Tree
- Set
  - HashSet
  - SortedSet
    - TreeSet
- Map
  - HashTable
  - HashMap
  - SortedMap
    - TreeMap

### List

- 순서가 있고, 중복을 허용합니다.
- 인덱스로 원소에 접근이 가능합니다.
- 크기가 가변적 입니다.

#### Array List

- 단방향 포인터 구조롤 데이터 순차적 접근에 강점을 가집니다. (인덱스가 부여된 데이터)
- 배열을 기반으로 데이터를 저장합니다.
- 인덱스를 가지고 있어 데이터 검색이 빠릅니다.
- 하지만, 데이터 삽입과 삭제는 shift 연산 등 부수적인 작업이 필요하기 때문에 Linked List 에 비해 느립니다.

#### Linked List

- 양방향 포인터 구조로 메모리 주소값들이 매칭되어 있는 자료구조 입니다.
- 인덱스를 가지고 있지 않기 때문에 Array List 에 비해 데이터 검색이 느립니다.
- 하지만, 데이터 삽입과 삭제는 빠릅니다.

#### Contiguous List

- 연속 리스트는 배열처럼 연속적인 기억 장소에 데이터가 저장되는 자료구조 입니다.
- 연속적으로 데이터가 저장되어 있어 검색에는 용이하지만, 데이터의 삽입이나 삭제는 용이하지 않습니다.

#### Stack

- 순서가 유지되는 선형 데이터 구조입니다.
- 리스트의 한쪽에서만 데이터의 삽입과 삭제가 일어나므로, 가장 마지막 요소부터 가장 처음 요소를 처리하는 LIFO(후입선출) 메커니즘을 가지고 있습니다.
- 기억공간이 부족한 경우 데이터를 삽입하는 경우 Overflow 가 발생하고, 삭제할 데이터가 없을 때 데이터를 삭제하고자 하면 Underflow 가 발생합니다.
- 데이터를 받는 순서대로 정렬되고 메모리의 크기가 동적이지만 한번에 하나의 데이터만 처리할 수 있습니다.

#### Queue

- 큐는 스택과 비슷하지만 FIFO(선입선출) 메커니즘을 가지고 있습니다.
- 리스트의 한쪽에서는 삽입이 일어나고, 다른 쪽에서는 삭제가 일어납니다.
- 데이터의 시작 부분을 Front, 끝 부분을 Rear 라고 합니다.
- 동적인 메모리 크기와 빠른 런타임을 자랑하지만, 가장 오래된 요소만을 가져오고 한번에 하나의 데이터만 처리하는 단점을 가지고 있습니다.
